@import "settings";
@import url(http://fonts.googleapis.com/css?family=Lato:700);

@mixin keyframes($animation-name) {

    @-webkit-keyframes #{$animation-name} {
        @content;
    }
    @-moz-keyframes #{$animation-name} {
        @content;
    }
    @-ms-keyframes #{$animation-name} {
        @content;
    }
    @-o-keyframes #{$animation-name} {
        @content;
    }
    @keyframes #{$animation-name} {
        @content;
    }
}

@mixin animation($str) {
    -webkit-animation: #{$str};
    -moz-animation: #{$str};
    -ms-animation: #{$str};
    -o-animation: #{$str};
    animation: #{$str};
}

$background-color: #ECF0F1;
$unfilled-seq-width: 300px;
$filled-seq-width: 350px;

body {
    background-color: $background-color;
}

.row {
    height: 100%;
    max-height: 600px;
}
.content {
    padding: 0;
    margin-top: 80px;
    height: calc( 100% - 50px);
    font-family: "Lato";
    width:100%;
    max-width: 500px;
}
ul.title-area {
    padding-left: 0;
}

.top-bar .name {
    display: inline-block;
    vertical-align: top;
}

.top-bar .name h1 {
    line-height: 39px;
    text-transform: capitalize;
}

h1 {
    font-size: 24px;
}

.sidebar {
    position: fixed;
    width: 400px;
    top: 0;
    bottom: 0;
    left: 0;
    background-color: white;
    z-index: 50;
    padding-top: 50px;

}

#minimap {
    padding: 0px 0;
    height: 400px;

    * {
        cursor: pointer !important;
    }

    & > .sequence {
        display: none;
    }

    .selected {
        border: 1px solid white;
    }

}
.sequence {

    @for $i from 1 through 10 {
        &.siblings-#{$i} {
            width: calc(100% / #{$i});
        }
    }

    & > h1 {
        text-transform: capitalize;
        color: #ECF0F1;
        background-color: #333333;
        margin: 0;
        margin-bottom: 3px;
        padding: 5px 20px;
    }

    display: inline-block;
    vertical-align: top;
    height: 100%;
    cursor: pointer;

    .focused > & {

        &:not(.fill) {
            margin: 0 15px;
            &:hover {
                margin: -5px 10px;
                height: calc(100% + 10px);
                width: calc(#{$unfilled-seq-width} + 10px);
            }
        }

        height: calc(100%);
        width: $unfilled-seq-width;
    }

    &.fill {
        margin: auto;
        width: $filled-seq-width;
        > h1 {
            display: none;
        }
    }
}

.cell {

    @for $i from 1 through 10 {
        &.siblings-#{$i} {
            height: calc( 100% / #{$i} );
            h1 ~ & {
                height: calc( (100% - 36px) / #{$i} );
            }
        }
    }

    display: block;


    &.branch {

        .fill > &:not(.focused) {
            &:hover {
                background-color: #DDDDDD;
                margin: 10px -5px;
                @for $i from 1 through 10 {
                    &.siblings-#{$i} {
                        height: calc( 100% / #{$i} - 2px );
                    }
                }
            }
            margin: 15px 0;
        }

        overflow-x: visible;
        white-space: nowrap;

        &.focused {
            height: 100%;
            padding: 0;
            @for $i from 1 through 10 {
                &.children-#{$i} {
                    width: calc( #{$unfilled-seq-width} * #{$i});
                }
            }
            &.remove-width {
                width: auto;
            }
        }
    }

    &.action {

        overflow: hidden;
        // border-radius: 3px;
        text-weight: bold;
        white-space: normal;
        // border: 2px solid white;

        .fill > & {
            height: auto;
            cursor: default;
        }

        h1 {

            text-transform: uppercase;

            :not(.focused) > .sequence > & {
                font-size: 0.8em;
                padding: 0 15px;
            }

            .focused > .sequence > & {
                margin:10px 0;
                font-size: 1.5em;
                padding: 0 15px;
            }

            :not(.focused) > * > :not(.focused) > * > & {
                display: none;
            }

        }

        p {
            display: none;
            margin: 0;
            padding: 0 15px;
            padding-bottom: 20px;
            width: 100%;

            &:last-child {
                padding-bottom: 10px;
                text-align: right;
            }

        }
    }
}

$border-darkness: 3%;
$darken-darkness: 30%;
$border-width: 2px;

$ready-color: #FFF;

$active-color: #4A90E2;

$blocked-color: #D0021B;

$done-color: #B1BAC4;

$none-color: #7F8C8D;

.READY, .AVAILABLE {

    background-color: $ready-color;
    border: $border-width solid darken($ready-color, $border-darkness);

    &.darken, .darken & {
        background-color: darken($ready-color, $darken-darkness);
        border: 1px solid darken( darken($ready-color, $border-darkness), $darken-darkness);
    }
}

.ACTIVE {

    background-color: $active-color;
    border: $border-width solid darken($active-color, $border-darkness);

    &.darken, .darken & {
        background-color: darken($active-color,$darken-darkness);
        border: $border-width solid darken(darken($active-color, $border-darkness),$darken-darkness);
    }

}

.BLOCKED, .SUSPENDED {

    background-color: $blocked-color;
    border: $border-width solid darken($blocked-color, $border-darkness);
    &.darken, .darken & {
        background-color: darken($blocked-color, $darken-darkness);
        border: $border-width solid darken(darken($blocked-color, $border-darkness), $darken-darkness);
    }
}

.DONE, .SATISFIED {

    background-color: $done-color;
    border: $border-width solid darken($done-color, $border-darkness);
    &.darken, .darken & {
        background-color: darken($done-color, $darken-darkness);
        border: $border-width solid darken(darken($done-color, $border-darkness), $darken-darkness);
    }
}

.NONE {

    background-color: $none-color;
    border: $border-width solid darken($none-color, $border-darkness);
    &.darken, .darken & {
        background-color: darken($none-color, $darken-darkness);
        border: $border-width solid darken(darken($none-color, $border-darkness), $darken-darkness);
    }
}
