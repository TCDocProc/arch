// Generated by CoffeeScript 1.9.0
(function() {
  var __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  jQuery(function() {
    var ANIMATION_SPEED, Action, ActionView, AppRouter, Branch, BranchView, PageView, Process, Processes, ProcessesView, Sequence, SequenceView, app_router, enableInteraction, view;
    Action = (function(_super) {
      __extends(Action, _super);

      function Action() {
        return Action.__super__.constructor.apply(this, arguments);
      }

      return Action;

    })(Backbone.Model);
    Branch = (function(_super) {
      __extends(Branch, _super);

      function Branch() {
        return Branch.__super__.constructor.apply(this, arguments);
      }

      Branch.prototype.initialize = function(data) {
        var seqs;
        seqs = [];
        _.each(data.sequences, (function(_this) {
          return function(seq, i) {
            var s;
            s = new Sequence(seq);
            s.i = i;
            return seqs.push(s);
          };
        })(this));
        return this.set('seqs', seqs);
      };

      return Branch;

    })(Backbone.Model);
    Sequence = (function(_super) {
      __extends(Sequence, _super);

      function Sequence() {
        return Sequence.__super__.constructor.apply(this, arguments);
      }

      Sequence.prototype.initialize = function(data) {
        var objs;
        objs = [];
        _.each(data, (function(_this) {
          return function(obj, i) {
            var a, b;
            if (obj.type === "action") {
              a = new Action(obj);
              a.i = i;
              return objs.push(a);
            } else if (obj.type === "branch") {
              b = new Branch(obj);
              b.i = i;
              return objs.push(b);
            }
          };
        })(this));
        return this.set('objs', objs);
      };

      return Sequence;

    })(Backbone.Model);
    Process = (function(_super) {
      __extends(Process, _super);

      function Process() {
        return Process.__super__.constructor.apply(this, arguments);
      }

      return Process;

    })(Backbone.Model);
    Processes = (function(_super) {
      __extends(Processes, _super);

      function Processes() {
        return Processes.__super__.constructor.apply(this, arguments);
      }

      Processes.prototype.model = Process;

      Processes.prototype.url = function() {
        return "/processes/user/" + this.user_id + ".json";
      };

      Processes.prototype.initialize = function(user_id) {
        this.user_id = user_id;
        return this;
      };

      Processes.prototype.parse = function(response) {
        _.each(response, function(process, i) {
          var s;
          s = new Sequence(process.sequence);
          s.i = i;
          process.sequence = s;
          return process.i = i;
        });
        return response;
      };

      return Processes;

    })(Backbone.Collection);
    ANIMATION_SPEED = 150;
    enableInteraction = true;
    ActionView = (function(_super) {
      __extends(ActionView, _super);

      function ActionView() {
        return ActionView.__super__.constructor.apply(this, arguments);
      }

      ActionView.prototype.attributes = {
        "class": "cell action"
      };

      ActionView.prototype.setup = function(siblingCount) {
        return $(this.el).addClass("siblings-" + siblingCount);
      };

      ActionView.prototype.render = function() {
        $(this.el).addClass(this.model.get('state'));
        $(this.el).html(("<h1> " + (this.model.get("name")) + " </h1>") + ("<p> " + (this.model.get("info")) + " </p>") + ("<p> STATUS: " + (this.model.get("state")) + " </p>"));
        return this;
      };

      ActionView.prototype.moveToPath = function(path, complete) {
        this.complete = complete;
        if ((_.first(path) != null) && _.first(path) !== this.model.i) {
          return $(this.el).slideUp(ANIMATION_SPEED, (function(_this) {
            return function() {
              return _this.complete();
            };
          })(this));
        } else {
          return $(this.el).slideDown(ANIMATION_SPEED, (function(_this) {
            return function() {
              return _this.complete();
            };
          })(this));
        }
      };

      return ActionView;

    })(Backbone.View);
    BranchView = (function(_super) {
      __extends(BranchView, _super);

      function BranchView() {
        return BranchView.__super__.constructor.apply(this, arguments);
      }

      BranchView.prototype.attributes = {
        "class": "cell branch"
      };

      BranchView.prototype.setup = function(siblingCount) {
        $(this.el).addClass("siblings-" + siblingCount);
        $(this.el).addClass("children-" + (this.model.get("seqs").length));
        return $(this.el).click((function(_this) {
          return function() {
            if ($(_this.el).parent().hasClass('fill') && !$(_this.el).hasClass("focused") && enableInteraction) {
              return Backbone.history.navigate((Backbone.history.fragment.match(/.*[^\/]/g)) + "/" + _this.model.i, true);
            }
          };
        })(this));
      };

      BranchView.prototype.render = function() {
        this.childViews = [];
        _.each(this.model.get('seqs'), (function(_this) {
          return function(seq) {
            var seqView;
            seqView = new SequenceView({
              model: seq
            });
            seqView.setup(_this.model.get('seqs').length);
            $(_this.el).append(seqView.render().$el);
            return _this.childViews.push(seqView);
          };
        })(this));
        return this;
      };

      BranchView.prototype.moveToPath = function(path, complete) {
        var passToChildren;
        this.complete = complete;
        passToChildren = (function(_this) {
          return function() {
            var completion;
            completion = 0;
            return _this.childViews.map(function(view) {
              var nextPath;
              nextPath = void 0;
              if (path != null) {
                nextPath = _.tail(path);
              }
              return view.moveToPath(nextPath, function() {
                completion += 1;
                if (completion >= _this.childViews.length) {
                  return _this.complete();
                }
              });
            });
          };
        })(this);
        if (_.first(path) != null) {
          if (_.first(path) === this.model.i) {
            return $(this.el).addClass("focused", ANIMATION_SPEED, 'swing', (function(_this) {
              return function() {
                $(_this.el).addClass("remove-width");
                return passToChildren();
              };
            })(this));
          } else {
            if ($(this.el).is(":visible")) {
              return $(this.el).animate({
                height: "toggle"
              }, ANIMATION_SPEED, 'swing', (function(_this) {
                return function() {
                  return _this.complete();
                };
              })(this));
            }
          }
        } else {
          if ($(this.el).is(":hidden")) {
            return $(this.el).animate({
              height: "toggle"
            }, ANIMATION_SPEED, 'swing', (function(_this) {
              return function() {
                return _this.complete();
              };
            })(this));
          } else {
            $(this.el).removeClass("remove-width");
            return $(this.el).removeClass("focused", ANIMATION_SPEED, 'swing', (function(_this) {
              return function() {
                return passToChildren();
              };
            })(this));
          }
        }
      };

      return BranchView;

    })(Backbone.View);
    SequenceView = (function(_super) {
      __extends(SequenceView, _super);

      function SequenceView() {
        return SequenceView.__super__.constructor.apply(this, arguments);
      }

      SequenceView.prototype.attributes = {
        "class": "sequence"
      };

      SequenceView.prototype.visible = true;

      SequenceView.prototype.setup = function(siblingCount, header) {
        $(this.el).addClass("siblings-" + siblingCount);
        $(this.el).addClass("children-" + (this.model.get("objs").length));
        if (header !== void 0) {
          $(this.el).prepend("<h1>" + header + "</h1>");
        }
        return $(this.el).click((function(_this) {
          return function() {
            if ($(_this.el).parent().hasClass('focused') && !$(_this.el).hasClass("fill") && enableInteraction) {
              return Backbone.history.navigate((Backbone.history.fragment.match(/.*[^\/]/g)) + "/" + _this.model.i, true);
            }
          };
        })(this));
      };

      SequenceView.prototype.render = function() {
        this.childViews = [];
        _.each(this.model.get("objs"), (function(_this) {
          return function(obj) {
            var actionView, branchView;
            switch (obj.get("type")) {
              case "action":
                actionView = new ActionView({
                  model: obj
                });
                actionView.setup(_this.model.get("objs").length);
                $(_this.el).append(actionView.render().$el);
                return _this.childViews.push(actionView);
              case "branch":
                branchView = new BranchView({
                  model: obj
                });
                branchView.setup(_this.model.get("objs").length);
                $(_this.el).append(branchView.render().$el);
                return _this.childViews.push(branchView);
            }
          };
        })(this));
        return this;
      };

      SequenceView.prototype.moveToPath = function(path, complete) {
        var passToChildren;
        this.complete = complete;
        passToChildren = (function(_this) {
          return function() {
            var completion;
            completion = 0;
            return _this.childViews.map(function(cell) {
              var nextPath;
              nextPath = void 0;
              if (path != null) {
                nextPath = _.tail(path);
              }
              return cell.moveToPath(nextPath, function() {
                completion += 1;
                if (completion >= _this.childViews.length) {
                  return _this.complete();
                }
              });
            });
          };
        })(this);
        if (_.first(path) != null) {
          if (_.first(path) === this.model.i) {
            return $(this.el).addClass("fill", ANIMATION_SPEED, 'swing', (function(_this) {
              return function() {
                return $(_this.el).children('.action').children('p').slideDown(ANIMATION_SPEED, function() {
                  return passToChildren();
                });
              };
            })(this));
          } else {
            if (this.visible) {
              this.visible = false;
              return $(this.el).animate({
                width: 'toggle'
              }, ANIMATION_SPEED, (function(_this) {
                return function() {
                  return _this.complete();
                };
              })(this));
            }
          }
        } else {
          if (this.visible) {
            return $(this.el).children('.action').children('p').slideUp(ANIMATION_SPEED, (function(_this) {
              return function() {
                return $(_this.el).removeClass("fill", ANIMATION_SPEED, function() {
                  return passToChildren();
                });
              };
            })(this));
          } else {
            this.visible = true;
            return $(this.el).animate({
              width: "toggle"
            }, ANIMATION_SPEED, (function(_this) {
              return function() {
                return _this.complete();
              };
            })(this));
          }
        }
      };

      return SequenceView;

    })(Backbone.View);
    ProcessesView = (function(_super) {
      __extends(ProcessesView, _super);

      function ProcessesView() {
        return ProcessesView.__super__.constructor.apply(this, arguments);
      }

      ProcessesView.prototype.attributes = {
        "class": "cell branch focused remove-width"
      };

      ProcessesView.prototype.initialize = function(collection) {
        this.collection = collection;
        return this;
      };

      ProcessesView.prototype.render = function() {
        this.childViews = [];
        $(this.el).addClass("children-" + this.collection.models.length);
        _.each(this.collection.models, (function(_this) {
          return function(proc) {
            var processView, seq;
            seq = proc.get('sequence');
            processView = new SequenceView({
              model: seq
            });
            processView.setup(_this.collection.models.length, proc.get('name'));
            $(_this.el).append(processView.render().$el);
            return _this.childViews.push(processView);
          };
        })(this));
        return this;
      };

      ProcessesView.prototype.moveToPath = function(path, complete) {
        var completion;
        this.complete = complete;
        completion = 0;
        return this.childViews.map((function(_this) {
          return function(view) {
            return view.moveToPath(path, function() {
              completion += 1;
              if (completion >= _this.childViews.length) {
                return _this.complete();
              }
            });
          };
        })(this));
      };

      return ProcessesView;

    })(Backbone.View);
    PageView = (function(_super) {
      __extends(PageView, _super);

      function PageView() {
        return PageView.__super__.constructor.apply(this, arguments);
      }

      PageView.prototype.el = '.content';

      PageView.prototype.initialize = function(user_id) {
        this.user_id = user_id;
        $('ul.title-area > :nth-child(1)').click((function(_this) {
          return function() {
            if (enableInteraction) {
              return Backbone.history.navigate("/processes/user/" + _this.user_id, true);
            }
          };
        })(this));
        return this;
      };

      PageView.prototype.render = function(callback) {
        var collection;
        collection = new Processes(this.user_id);
        collection.fetch({
          success: (function(_this) {
            return function() {
              _this.procView = new ProcessesView(collection);
              $(_this.el).html(_this.procView.render().$el);
              return callback();
            };
          })(this)
        });
        return this;
      };

      PageView.prototype.moveToPath = function(path) {
        var navClick, pathArray, _ref;
        navClick = (function(_this) {
          return function(path) {
            if (enableInteraction) {
              return Backbone.history.navigate("/processes/user/" + _this.user_id + "/" + (path.join('/')), true);
            }
          };
        })(this);
        enableInteraction = false;
        if ((_ref = $('ul.title-area > :not(:nth-child(1))')) != null) {
          _ref.remove();
        }
        pathArray = path != null ? path.split("/").map(Number) : void 0;
        if (pathArray != null) {
          pathArray.forEach((function(_this) {
            return function(e, i) {
              if (i === 0) {
                $('ul.title-area').append("<li class='name'><h1>&#10095;</h1></li><li class='name'><h1><a>" + $(".content > .branch").children().eq(e).children("h1").text() + "</a></h1></li>");
              } else {
                $('ul.title-area').append("<li class='name'><h1>&#10095;</h1></li><li class='name'><h1><a>...</a></h1></li>");
              }
              return $('ul.title-area').children(":last-child").click(function() {
                return navClick(_.first(pathArray, i + 1));
              });
            };
          })(this));
        }
        return this.procView.moveToPath(pathArray, function() {
          return enableInteraction = true;
        });
      };

      return PageView;

    })(Backbone.View);
    AppRouter = (function(_super) {
      __extends(AppRouter, _super);

      function AppRouter() {
        return AppRouter.__super__.constructor.apply(this, arguments);
      }

      AppRouter.prototype.routes = {
        "processes/user/:user_id(/*path)": "process"
      };

      return AppRouter;

    })(Backbone.Router);
    app_router = new AppRouter;
    view = void 0;
    app_router.on('route:process', function(user_id, path) {
      if (view != null) {
        return view.moveToPath(path);
      } else {
        view = new PageView(user_id);
        return view.render(function() {
          return view.moveToPath(path);
        });
      }
    });
    return Backbone.history.start({
      pushState: true
    });
  });

}).call(this);
